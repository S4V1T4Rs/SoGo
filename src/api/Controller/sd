// Función para guardar un usuario en Firebase o en la API dependiendo de la conectividad
export const createUsuario = async (data, setPersonalFormValues, setLaboralFormValues, setMessage, setMessageType, allFieldsFilled, isOnline) => {
  try {
    if (!allFieldsFilled) {
      setMessage('Todos los campos de los tabs deben estar llenos');
      setMessageType('error');
      return;
    }

    // Verificar si el DNI ya está en uso en Firebase
    const usuariosRef = collection(db, 'usuarios');
    const dniInUse = await isDniInUse(data.NumeroDocumento, usuariosRef);
    if (dniInUse) {
      setMessage('El número de DNI ya está en uso.');
      setMessageType('error');
      setTimeout(() => {
        setMessage('');
        setMessageType('');
      }, 4000); // Ocultar el mensaje después de 4 segundos
      setPersonalFormValues((prevValues) => ({
        ...prevValues,
        NumeroDocumento: '' // Limpiar el valor del campo del número de documento
      }));
      return;
    }

    // Si hay conexión a Internet, guardar en Firebase
    if (isOnline) {
      await setDoc(doc(usuariosRef, data.id), {
        'Datos Personales': data['Datos Personales'],
        'Datos Laborales': data['Datos Laborales']
      });
      setMessage('Datos guardados correctamente en Firestore');
      setMessageType('success');
      setTimeout(() => {
        setMessage('');
        setMessageType('');
      }, 8000);
      setPersonalFormValues({});
      setLaboralFormValues({});
    } else {
      // Si no hay conexión a Internet, guardar en la API
      const apiResponse = await axios.post('http://localhost:8080/api/call', data);
      const apiData = apiResponse.data;
      const nextId = apiData.idCall;
      setMessage('Datos guardados correctamente en la API');
      setMessageType('success');
      setTimeout(() => {
        setMessage('');
        setMessageType('');
      }, 8000);
      return nextId.toString(); // Retorna el ID del documento creado
    }
  } catch (error) {
    console.error('Error creating document:', error);
    throw error;
  }
};